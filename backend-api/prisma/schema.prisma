generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// ### ENUMS ###
enum Role {
  ADMIN
  EDITOR
  VIEWER
}

enum Profile {
  NORMAL
  SUBSCRITOR
  VIP
}

enum SlotPaymentSource {
  MAIN_SLOT
  BONUS_HUNT
  TOURNAMENT
  CLIMB_THE_QUEST
  ELO_MAIS_FRACO
  BONUS_BUY_BATTLE
  KING_OF_THE_HILL
}

enum BonusHuntStatus {
  EDIT
  STANDBY
  HUNTING
  OPENING
  FINISHED
}

enum Round {
  QUARTOS
  SEMIS
  FINAL
}

enum ClimbResult {
  NAO_COMPLETOU
  COMPLETOU
}

/// ### USER ###
model User {
  id        Int      @id @default(autoincrement())
  name      String?
  email     String   @unique
  twitchId  String?  @unique
  password  String?
  role      Role     @default(VIEWER)
  profile   Profile  @default(NORMAL)
  points    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bonusHunts          BonusHunt[]
  battlesAsP1         BonusBuyBattle[]             @relation("Player1")
  battlesAsP2         BonusBuyBattle[]             @relation("Player2")
  battlesWon          BonusBuyBattle[]             @relation("Winner")
  matchesAsP1         TournamentMatch[]            @relation("MatchPlayer1")
  matchesAsP2         TournamentMatch[]            @relation("MatchPlayer2")
  matchesWon          TournamentMatch[]            @relation("MatchWinner")
  participations      TournamentParticipant[]
  climbParticipations ClimbTheQuestParticipation[]
  eloParticipants     EloMaisFracoParticipant[]
  kingEntries         KingOfTheHillEntry[]
}

/// ### SLOT ###
model Slot {
  id               Int       @id @default(autoincrement())
  name             String    // parte antes do '|' no seu JSON
  displayName      String    @unique  // o valor completo do seu JSON (ex: "Alpha Eagle|4FS")
  provider         String?
  rtp              Float?
  potencial        Float?
  volatility       Int?
  bestwin          Float?
  bestX            Float?
  avgX             Float?
  quantidadeBonus  Int?
  releaseDate      DateTime?
  isSuper          Boolean   @default(false)  
  imageURL         String?                 

  // referência ao slot base (null se for slot base ou sem variações)
  slotReference    Slot?     @relation("SlotVariants", fields: [slotReferenceId], references: [id])
  slotReferenceId  Int?
  variants         Slot[]    @relation("SlotVariants")

  // relacionamentos
  payments         SlotPayment[]
  usedInBattle1    BonusBuyBattle[]        @relation("Slot1")
  usedInBattle2    BonusBuyBattle[]        @relation("Slot2")
  usedInMatch1     TournamentMatch[]       @relation("MatchSlot1")
  usedInMatch2     TournamentMatch[]       @relation("MatchSlot2")
  participantSlots TournamentParticipant[]
  kingEntries      KingOfTheHillEntry[]
}

/// ### SLOT PAYMENT ###
model SlotPayment {
  id        Int               @id @default(autoincrement())
  name      String
  bet       Float
  payment   Float
  multi     Float
  source    SlotPaymentSource @default(MAIN_SLOT)
  eventId   Int?
  slotId    Int
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  slot Slot @relation(fields: [slotId], references: [id], onDelete: Cascade)

  @@index([source, eventId])
}

/// ### BONUS HUNT ###
model BonusHunt {
  id          Int             @id @default(autoincrement())
  name        String          @default("Bonus Hunt")
  description String?
  status      BonusHuntStatus @default(HUNTING)
  startTime   DateTime?
  madeById    Int
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  madeBy  User              @relation(fields: [madeById], references: [id], onDelete: Cascade)
  summary BonusHuntSummary?
}

model BonusHuntSummary {
  id                     Int      @id @default(autoincrement())
  bonusHuntId            Int      @unique
  bonusQuantity          Int
  totalBonusValue        Float
  remainingBonusQuantity Int
  remainingBonusValue    Float
  bestSlot               String
  worstSlot              String
  madeBy                 String
  start                  Float
  startTime              DateTime
  initialBreakEven       Float
  currentBreakEven       Float
  averageMulti           Float
  totalPay               Float
  nowPlaying             String
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  bonusHunt BonusHunt @relation(fields: [bonusHuntId], references: [id], onDelete: Cascade)
}

/// ### BONUS BUY BATTLE ###
model BonusBuyBattle {
  id              Int      @id @default(autoincrement())
  name            String   @default("Bonus Buy Battle")
  description     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  maxRounds       Int
  slot1BonusValue Float?
  slot2BonusValue Float?
  player1Score    Float    @default(0)
  player2Score    Float    @default(0)
  winnerId        Int?
  player1Id       Int
  player2Id       Int
  slot1Id         Int
  slot2Id         Int

  player1 User  @relation("Player1", fields: [player1Id], references: [id], onDelete: Cascade)
  player2 User  @relation("Player2", fields: [player2Id], references: [id], onDelete: Cascade)
  winner  User? @relation("Winner", fields: [winnerId], references: [id], onDelete: Cascade)
  slot1   Slot  @relation("Slot1", fields: [slot1Id], references: [id], onDelete: Cascade)
  slot2   Slot  @relation("Slot2", fields: [slot2Id], references: [id], onDelete: Cascade)
}

/// ### TOURNAMENT ###
model Tournament {
  id          Int      @id @default(autoincrement())
  name        String   @default("Tournament")
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  matches      TournamentMatch[]
  participants TournamentParticipant[]
}

model TournamentParticipant {
  id           Int      @id @default(autoincrement())
  tournamentId Int
  userId       Int
  slotId       Int
  seed         Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  tournament Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  slot       Slot       @relation(fields: [slotId], references: [id], onDelete: Cascade)

  @@unique([tournamentId, seed])
}

model TournamentMatch {
  id              Int      @id @default(autoincrement())
  tournamentId    Int
  roundNumber     Round
  matchNumber     Int
  player1Id       Int?
  player2Id       Int?
  slot1Id         Int?
  slot2Id         Int?
  maxRounds       Int
  slot1BonusValue Float
  slot2BonusValue Float
  player1Score    Float    @default(0)
  player2Score    Float    @default(0)
  winnerId        Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  tournament Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  player1    User?       @relation("MatchPlayer1", fields: [player1Id], references: [id], onDelete: Cascade)
  player2    User?       @relation("MatchPlayer2", fields: [player2Id], references: [id], onDelete: Cascade)
  winner     User?      @relation("MatchWinner", fields: [winnerId], references: [id], onDelete: Cascade)
  slot1      Slot?       @relation("MatchSlot1", fields: [slot1Id], references: [id], onDelete: Cascade)
  slot2      Slot?       @relation("MatchSlot2", fields: [slot2Id], references: [id], onDelete: Cascade)

  @@unique([tournamentId, roundNumber, matchNumber])
}

model ClimbTheQuest {
  id          Int      @id @default(autoincrement())
  name        String   @default("Climb the Quest")
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  participants ClimbTheQuestParticipation[]
}

model ClimbTheQuestParticipation {
  id              Int      @id @default(autoincrement())
  climbTheQuestId Int
  userId          Int
  startedAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  climbTheQuest              ClimbTheQuest                @relation(fields: [climbTheQuestId], references: [id], onDelete: Cascade)
  user                       User                         @relation(fields: [userId], references: [id], onDelete: Cascade)
  ClimbTheQuestLevelProgress ClimbTheQuestLevelProgress[]
}

model ClimbTheQuestLevelProgress {
  id              Int         @id @default(autoincrement())
  participationId Int
  level           Int
  attemptsLeft    Int         @default(5)
  result          ClimbResult
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  participation ClimbTheQuestParticipation @relation(fields: [participationId], references: [id], onDelete: Cascade)

  @@unique([participationId, level])
}

model EloMaisFraco {
  id          Int      @id @default(autoincrement())
  name        String   @default("Elo Mais Fraco")
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  participants EloMaisFracoParticipant[]
}

model EloMaisFracoParticipant {
  id             Int      @id @default(autoincrement())
  eloMaisFracoId Int
  userId         Int
  score          Float?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  eloMaisFraco EloMaisFraco @relation(fields: [eloMaisFracoId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eloMaisFracoId, userId])
}

model KingOfTheHill {
  id          Int      @id @default(autoincrement())
  name        String   @default("King of the Hill")
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  entries KingOfTheHillEntry[]
}

model KingOfTheHillEntry {
  id              Int      @id @default(autoincrement())
  kingOfTheHillId Int
  slotId          Int
  userId          Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  kingOfTheHill KingOfTheHill @relation(fields: [kingOfTheHillId], references: [id], onDelete: Cascade)
  slot          Slot          @relation(fields: [slotId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}
